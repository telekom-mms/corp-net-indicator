// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package i18n

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"de": &dictionary{index: deIndex, data: deData},
		"en": &dictionary{index: enIndex, data: enData},
	}
	fallback := language.MustParse("en")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"About":                       5,
	"Cancel":                      16,
	"Certificate expires":         24,
	"Connect":                     15,
	"Connect VPN":                 2,
	"Connect to VPN":              3,
	"Connected":                   20,
	"Connected at":                21,
	"Device":                      23,
	"Disconnect VPN":              4,
	"Error: [%v]":                 7,
	"IP":                          22,
	"Identity Details":            9,
	"Kerberos ticket valid until": 12,
	"Last Refresh":                11,
	"Logged in":                   10,
	"Password":                    13,
	"Physical network":            19,
	"Program to show corporate network status.": 6,
	"ReLogin":     8,
	"Server":      14,
	"Show Status": 1,
	"Status":      0,
	"VPN Details": 18,
	"not trusted": 17,
	"trusted":     25,
}

var deIndex = []uint32{ // 27 elements
	0x00000000, 0x00000007, 0x00000017, 0x00000025,
	0x0000003b, 0x00000047, 0x0000004d, 0x00000086,
	0x00000096, 0x000000a3, 0x000000b4, 0x000000bf,
	0x000000d0, 0x000000ec, 0x000000f5, 0x000000fc,
	0x00000106, 0x00000110, 0x00000128, 0x00000134,
	0x00000143, 0x0000014d, 0x0000015a, 0x0000015d,
	0x00000164, 0x0000017d, 0x0000018f,
} // Size: 132 bytes

const deData string = "" + // Size: 399 bytes
	"\x02Status\x02Status anzeigen\x02VPN verbinden\x02Mit dem VPN verbinden" +
	"\x02VPN trennen\x02Über\x02Ein Programm zur Anzeige des Unternehmensnetz" +
	"werkstatus.\x02Fehler: [%[1]v]\x02Neu anmelden\x02Identity Details\x02An" +
	"gemeldet\x02Letzte Anmeldung\x02Kerberos Ticket gültig bis\x02Passwort" +
	"\x02Server\x02Verbinden\x02Abbrechen\x02nicht vertrauenswürdig\x02VPN De" +
	"tails\x02Phys. Netzwerk\x02Verbunden\x02Verbunden am\x02IP\x02Gerät\x02Z" +
	"ertifikat läuft aus am\x02vertrauenswürdig"

var enIndex = []uint32{ // 27 elements
	0x00000000, 0x00000007, 0x00000013, 0x0000001f,
	0x0000002e, 0x0000003d, 0x00000043, 0x0000006d,
	0x0000007c, 0x00000084, 0x00000095, 0x0000009f,
	0x000000ac, 0x000000c8, 0x000000d1, 0x000000d8,
	0x000000e0, 0x000000e7, 0x000000f3, 0x000000ff,
	0x00000110, 0x0000011a, 0x00000127, 0x0000012a,
	0x00000131, 0x00000145, 0x0000014d,
} // Size: 132 bytes

const enData string = "" + // Size: 333 bytes
	"\x02Status\x02Show Status\x02Connect VPN\x02Connect to VPN\x02Disconnect" +
	" VPN\x02About\x02Program to show corporate network status.\x02Error: [%[" +
	"1]v]\x02ReLogin\x02Identity Details\x02Logged in\x02Last Refresh\x02Kerb" +
	"eros ticket valid until\x02Password\x02Server\x02Connect\x02Cancel\x02no" +
	"t trusted\x02VPN Details\x02Physical network\x02Connected\x02Connected a" +
	"t\x02IP\x02Device\x02Certificate expires\x02trusted"

	// Total table size 996 bytes (0KiB); checksum: 6088A532
